#!/usr/bin/env python

import sys
import wave
import getopt

def merge(leftin, rightin, output):
    if not leftin:
        print 'error: leftin unspecified'
        return

    if not rightin:
        print 'error: rightin unspecified'
        return

    lwf = wave.open(leftin, 'rb')
    lnchannels = lwf.getnchannels()
    lframerate = lwf.getframerate()
    lsampwidth = lwf.getsampwidth()
    lnframes = lwf.getnframes()
    if lnchannels > 1:
        print 'error: leftin has %d channels' % lnchannels
        return

    rwf = wave.open(rightin, 'rb')
    rnchannels = rwf.getnchannels()
    rframerate = rwf.getframerate()
    rsampwidth = rwf.getsampwidth()
    rnframes = rwf.getnframes()
    if rnchannels > 1:
        print 'error: rightin has %d channels' % rnchannels
        return
    
    if lframerate != rframerate:
        print 'error: lframerate != rframerate'
        return

    if lsampwidth != rsampwidth:
        print 'error: lsampwidth != rsampwidth'
        return

    if lnframes != rnframes:
        print 'error: lnframes != rnframes'
        return

    owf = wave.open(output, 'wb')
    owf.setnchannels(2)
    owf.setframerate(lframerate)
    owf.setsampwidth(lsampwidth)
    owf.setnframes(lnframes)

    sys.stdout.write('Channels: %d\n' % 2)
    sys.stdout.write('Frame rate: %d\n' % lframerate)
    sys.stdout.write('Sample width: %d\n' % lsampwidth)
    sys.stdout.write('Frames: %d\n' % lnframes)

    while True:
        data1 = lwf.readframes(lframerate)
        datalen1 = len(data1)
        framecnt1 = datalen1 / lsampwidth
        if framecnt1 <= 0:
            break

        data2 = rwf.readframes(rframerate)
        datalen2 = len(data2)
        framecnt2 = datalen2 / rsampwidth
        if framecnt2 <= 0:
            break

        data = ''
        framecnt = min(framecnt1, framecnt2)
        for i in range(framecnt):
            a = i * lsampwidth
            b = (i + 1) * lsampwidth
            data += data1[a:b]
            data += data2[a:b]

        owf.writeframes(data)

def usage():
    print 'wav2stereo [Options] OUTPUT'

def version():
    print 'wav2stereo 0.1.0'

def main():
    leftin = None
    rightin = None
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hl:r:V',
            ['help', 'left=', 'right=', 'version'])
    except getopt.GetoptError, err:
        show_usage()
        sys.exit(1)

    for o, a in opts:
        if o in ('-h', '--help'):
            usage()
            exit()
        elif o in ('-l', '--left'):
            leftin = a
        elif o in ('-r', '--right'):
            rightin = a
        elif o in ('-V', '--version'):
            version()
            exit()

    merge(leftin, rightin, args[0])

if __name__ == '__main__':
    main()
