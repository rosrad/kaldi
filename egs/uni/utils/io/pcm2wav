#!/usr/bin/env python

import sys
import wave
import getopt
import struct

def transfer(inf, wf, nchannels, framerate, sampwidth):
    wf.setnchannels(nchannels)
    wf.setframerate(framerate)
    wf.setsampwidth(sampwidth)

    framesize = nchannels * sampwidth
    bufsz = framesize * framerate  # frames of one second

    nframes = 0
    while True:
        data = inf.read(bufsz)
        datalen = len(data)

        if datalen < framesize:
            break

        rem = datalen % framesize
        if rem > 0:
            data = data[:-rem]

        wf.writeframes(data)
        nframes += len(data) / framesize

    return nframes

def convert(input, output, nchannels, framerate, sampwidth):
    sys.stdout.write('Channels: %d\n' % nchannels)
    sys.stdout.write('Frame rate: %d\n' % framerate)
    sys.stdout.write('Sample width: %d\n' % sampwidth)

    with open(input, 'rb') as inf:
        wf = wave.open(output, 'wb')
        nframes = transfer(inf, wf, nchannels, framerate, sampwidth)
        wf.close()
        print 'nframes: %s' % nframes
        print 'nbytes: %s' % (nframes * nchannels * sampwidth)

def usage():
    print 'pcm2wav INPUT OUTPUT'

def version():
    print 'pcm2wav 0.1.0'

def main():
    nchannels = 2
    framerate = 44100
    sampwidth = 2

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hc:r:w:V',
            ['help', 'nchannels=', 'framerate', 'sampwidth', 'version'])
    except getopt.GetoptError, err:
        show_usage()
        sys.exit(1)

    for o, a in opts:
        if o in ('-h', '--help'):
            show_usage()
            exit()
        elif o in ('-c', '--nchannels'):
            nchannels = int(a)
        elif o in ('-r', '--framerate'):
            framerate = int(a)
        elif o in ('-w', '--sampwidth'):
            sampwidth = int(a)
        elif o in ('-V', '--version'):
            show_version()
            exit()

    convert(args[0], args[1], nchannels, framerate, sampwidth)

if __name__ == '__main__':
    main()
